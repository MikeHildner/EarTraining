
@{
    ViewBag.Title = "L2C4 1 - Major Triad Progressions - 3 Chords";
}
<h4 class="text-warning">Not yet fully implemented</h4>
<h2>Level 2 Chapter 4</h2>
<h5>@ViewBag.Title</h5>

<div class="card bg-light text-primary">
    <div class="card-body">
        <i class="fa fa-info"></i>
        <span class="pad-left-10">These are selected from the major triad progression questions on page 65.</span>
    </div>
</div>
<div class="row margin-top-5">
    <div class="col-md-6 card">
        <div>
            <div class="float-left">
                <h4>Drill</h4>
            </div>
            <div class="float-right">
                <span id="spinner" class="spinner-border spinner-border-sm text-primary" role="status" aria-hidden="true"></span>
                <input type="button" class="btn btn-primary margin-top-5" value="Get a New Progression" onclick="setAudProgressionSrc()" />
            </div>
        </div>

        <figure>
            <figcaption>Press the play button to hear the progression</figcaption>
            <audio id="audProgression" controls preload='none'>
                <source src='' type='audio/mpeg'>
            </audio>
        </figure>
        <p>Hover over the below to see the progression</p>
        <div class="spoiler" id="progression"></div>
    </div>
</div>

<div class="row">
    <div class="col-md-4 card">
        <figure>
            <figcaption>
                <div class="float-left">5 followed by 1/2U</div>
                <div class="float-right custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input cb-include" id="cb-include-100" checked />
                    <label class="custom-control-label small" for="cb-include-100">Include in Drills</label>
                </div>
            </figcaption>
            <div class="clearfix"></div>
            <audio controls preload='none'>
                <source src='@Url.Action("Get3ChordProgression", "L2C4", new { doNoteName = ViewBag.Pitch.PitchName, progressionType = 100 })' type='audio/mpeg'>
            </audio>
        </figure>
    </div>
    <div class="col-md-4 card">
        <figure>
            <figcaption>
                <div class="float-left">4 followed by 1/2D</div>
                <div class="float-right custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input cb-include" id="cb-include-101" checked />
                    <label class="custom-control-label small" for="cb-include-101">Include in Drills</label>
                </div>
            </figcaption>
            <div class="clearfix"></div>
            <audio controls preload='none'>
                <source src='@Url.Action("Get3ChordProgression", "L2C4", new { doNoteName = ViewBag.Pitch.PitchName, progressionType = 101 })' type='audio/mpeg'>
            </audio>
        </figure>
    </div>
</div>

<!-- Automation -->
<div class="row">
    <div class="card">
        <div class="card-header bg-warning text-primary">
            <i class="fa fa-gears"></i><label class="margin-left-default">Automation</label>
        </div>
        <div class="card-body">
            <p class="card-text">Automate the drill process. This respects your "Include in Drills" selections.</p>
            <button id="btnAutomate" class="btn btn-warning" onclick="automate();">Go!</button><label class="margin-left-default" id="remainingIterations"></label>
        </div>
    </div>
</div>

@{Html.RenderPartial("~/Views/Shared/RevealModal.cshtml");}

@section  scripts {
    <script>
        var jsIntervals = [];
        let iterations = 0;
        let maxIterations = 10;

        let delayBeforeProgression = 1000;
        let delayBeforeShowModal = 4500;
        let delayBeforeHideModal = 3500;
        let delayBetweenIterations = delayBeforeProgression + delayBeforeShowModal + delayBeforeHideModal;

        let isDoingAutomation = false;

        $(document).ready(function () {
            setAudProgressionSrc();

            $('.cb-include').change(function () {
                setAudProgressionSrc();
            });

            $("#audProgression").on("ended", function () {
                if (isDoingAutomation) {
                    setAudProgressionSrc();
                }
            });

        });

        function setAudProgressionSrc() {
            $('#spinner').show();
            var baseSrc = '@Url.Action("Get3ChordProgression", "L2C4", new { doNoteName = ViewBag.Pitch.PitchName })';
            var excluded = getExcluded(null, 0);
            var progressiontype = getRandomInt(100, 101, excluded);
            var src = baseSrc + '&progressiontype=' + progressiontype;
            $('#audProgression').attr('src', src);
            //$('#audProgression source').attr('src', src);

            var msg = '';
            var friendlyMessage = '';
            switch (progressiontype) {
                case 100:
                    msg = msg + 'I (2nd) - IV (1st) - bV (1st)';
                    friendlyMessage = '<span class="font-weight-bold">5</span> followed by <span class="font-weight-bold">1/2U</span>';
                    break;
                case 101:
                    msg = msg + 'I (root) - V (1st) - bV (1st)';
                    friendlyMessage = '<span class="font-weight-bold">4</span> followed by <span class="font-weight-bold">1/2D</span>';
                    break;
                default:
                    consoleAndToastr("progressiontype '" + progressiontype + "' is not supported.");
                    break;
            }

            getNewDo(doTheChange, msg, friendlyMessage);

            //var doInfo = $('#doSpoiler').text();
            //var progressionTable = buildProgressionTable(doInfo, msg, friendlyMessage, true);
            //$('#progression').html(progressionTable);

            $('#spinner').fadeOut("slow");

        }

        function doTheChange(pitchName, msg, friendlyMessage) {
            changeAllDoNoteNames(pitchName);
            var progressionTable = buildProgressionTable(pitchName, msg, friendlyMessage, true);
            $('#progression').html(progressionTable);
            $('#spinner').fadeOut("slow");
        }

        function automate() {
            var buttonText = $("#btnAutomate").text();
            switch (buttonText) {
                case "Go!":
                    isDoingAutomation = true;
                    $("#btnAutomate").text("Stop");
                    playAndShow();
                    var jsInterval = setInterval(playAndShow, delayBetweenIterations);
                    jsIntervals.push(jsInterval);
                    break;

                case "Stop":
                    isDoingAutomation = false;
                    $("#btnAutomate").text("Go!");
                    resetIterationsMessage();
                    clearAllIntervals();
                    break;

                default:
                    alert("'" + buttonText + "' is not supported.");
                    break;
            }
        }

        function playAndShow() {
            iterations += 1;
            if (iterations > maxIterations) {
                $("#btnAutomate").text("Go!");
                resetIterationsMessage();
                iterations = 0;
                clearAllIntervals();
                return;
            }
            else {
                $("#remainingIterations").text("Playing " + iterations + " of " + maxIterations + " iterations.");
            }

            //document.getElementById('doPlayer').play();
            setTimeout(playProgression, delayBeforeProgression);
        }

        function playProgression() {
            //setAudProgressionSrc();
            $('#audProgression').trigger("play");
            setTimeout(showModal, delayBeforeShowModal);
        }

        function showModal() {
            $("#revealModalBody").html($("#progression").html());
            $("#revealModal").modal('show');
            setTimeout(hideModal, delayBeforeHideModal);
        }

        function hideModal() {
            $("#revealModal").modal('hide');
        }

        function resetIterationsMessage() {
            $("#remainingIterations").text("Automation will stop after " + maxIterations + " iterations.");
        }

        function clearAllIntervals() {
            for (var id of this.jsIntervals) {
                clearInterval(id);
            }

            jsIntervals = [];
        }

    </script>
}

